// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: markets.sql

package database

import (
	"context"
	"database/sql"
)

const getActiveMarkets = `-- name: GetActiveMarkets :many
SELECT DISTINCT m.id, m.token_id, m.slug, m.question, m.outcome, m.created_at, m.updated_at FROM markets m
JOIN trading_sessions ts ON ts.ended_at IS NULL
JOIN market_signals ms ON ms.token_id = m.token_id
WHERE ms.timestamp > NOW() - INTERVAL '24 hours'
`

func (q *Queries) GetActiveMarkets(ctx context.Context) ([]Market, error) {
	rows, err := q.db.QueryContext(ctx, getActiveMarkets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Market{}
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.TokenID,
			&i.Slug,
			&i.Question,
			&i.Outcome,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMarketByTokenID = `-- name: GetMarketByTokenID :one
SELECT id, token_id, slug, question, outcome, created_at, updated_at FROM markets WHERE token_id = $1
`

func (q *Queries) GetMarketByTokenID(ctx context.Context, tokenID string) (Market, error) {
	row := q.db.QueryRowContext(ctx, getMarketByTokenID, tokenID)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.Slug,
		&i.Question,
		&i.Outcome,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertMarket = `-- name: UpsertMarket :one
INSERT INTO markets (token_id, slug, question, outcome)
VALUES ($1, $2, $3, $4)
ON CONFLICT (token_id) 
DO UPDATE SET 
    slug = EXCLUDED.slug,
    question = EXCLUDED.question,
    updated_at = NOW()
RETURNING id, token_id, slug, question, outcome, created_at, updated_at
`

type UpsertMarketParams struct {
	TokenID  string         `json:"token_id"`
	Slug     sql.NullString `json:"slug"`
	Question sql.NullString `json:"question"`
	Outcome  sql.NullString `json:"outcome"`
}

func (q *Queries) UpsertMarket(ctx context.Context, arg UpsertMarketParams) (Market, error) {
	row := q.db.QueryRowContext(ctx, upsertMarket,
		arg.TokenID,
		arg.Slug,
		arg.Question,
		arg.Outcome,
	)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.Slug,
		&i.Question,
		&i.Outcome,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
