// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createSession = `-- name: CreateSession :one
INSERT INTO trading_sessions (strategy_id, start_balance, current_balance)
VALUES ($1, $2, $3)
RETURNING id, strategy_id, start_balance, current_balance, started_at, ended_at
`

type CreateSessionParams struct {
	StrategyID     sql.NullInt32  `json:"strategy_id"`
	StartBalance   sql.NullString `json:"start_balance"`
	CurrentBalance sql.NullString `json:"current_balance"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (TradingSession, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.StrategyID, arg.StartBalance, arg.CurrentBalance)
	var i TradingSession
	err := row.Scan(
		&i.ID,
		&i.StrategyID,
		&i.StartBalance,
		&i.CurrentBalance,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const createStrategy = `-- name: CreateStrategy :one
INSERT INTO strategies (name, config, initial_balance)
VALUES ($1, $2, $3)
ON CONFLICT (name) DO UPDATE 
SET config = EXCLUDED.config
RETURNING id, name, config, initial_balance, active, created_at
`

type CreateStrategyParams struct {
	Name           string          `json:"name"`
	Config         json.RawMessage `json:"config"`
	InitialBalance sql.NullString  `json:"initial_balance"`
}

func (q *Queries) CreateStrategy(ctx context.Context, arg CreateStrategyParams) (Strategy, error) {
	row := q.db.QueryRowContext(ctx, createStrategy, arg.Name, arg.Config, arg.InitialBalance)
	var i Strategy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Config,
		&i.InitialBalance,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const endSession = `-- name: EndSession :exec
UPDATE trading_sessions 
SET ended_at = NOW() 
WHERE id = $1
`

func (q *Queries) EndSession(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, endSession, id)
	return err
}

const getActiveSession = `-- name: GetActiveSession :one
SELECT id, strategy_id, start_balance, current_balance, started_at, ended_at FROM trading_sessions
WHERE strategy_id = $1 AND ended_at IS NULL
ORDER BY started_at DESC
LIMIT 1
`

func (q *Queries) GetActiveSession(ctx context.Context, strategyID sql.NullInt32) (TradingSession, error) {
	row := q.db.QueryRowContext(ctx, getActiveSession, strategyID)
	var i TradingSession
	err := row.Scan(
		&i.ID,
		&i.StrategyID,
		&i.StartBalance,
		&i.CurrentBalance,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const updateSessionBalance = `-- name: UpdateSessionBalance :exec
UPDATE trading_sessions 
SET current_balance = $1 
WHERE id = $2
`

type UpdateSessionBalanceParams struct {
	CurrentBalance sql.NullString `json:"current_balance"`
	ID             int32          `json:"id"`
}

func (q *Queries) UpdateSessionBalance(ctx context.Context, arg UpdateSessionBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionBalance, arg.CurrentBalance, arg.ID)
	return err
}
