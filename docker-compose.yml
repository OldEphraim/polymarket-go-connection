services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: polymarket_dev
      POSTGRES_USER: a8garber
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U a8garber -d polymarket_dev"]
      interval: 5s
      timeout: 5s
      retries: 10

  migrator:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./sql/migrations:/migrations:ro
    command: ["goose", "-dir", "/migrations", "postgres", "postgresql://a8garber:Grimsvotn1783@postgres:5432/polymarket_dev?sslmode=disable", "up"]
    restart: "no"

  gatherer:
    build: .
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://a8garber:${POSTGRES_PASSWORD}@postgres:5432/polymarket_dev?sslmode=disable
      API_KEY: ${API_KEY}
      RUN_TYPE: prod
      GATHERER_USE_WS: ${GATHERER_USE_WS:-true}
      GATHERER_WS_URL: ${GATHERER_WS_URL:-wss://ws-subscriptions-clob.polymarket.com/ws/market}
      GATHERER_SCAN_INTERVAL: ${GATHERER_SCAN_INTERVAL:-30s}
      POLY_WS_DEBUG: ${POLY_WS_DEBUG:-0}
      POLY_WS_LOG_UNKNOWN: ${POLY_WS_LOG_UNKNOWN:-0}
    command: ["/usr/local/bin/gatherer"]
    restart: unless-stopped

  api:
    build: .
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://a8garber:${POSTGRES_PASSWORD}@postgres:5432/polymarket_dev?sslmode=disable
      API_KEY: ${API_KEY}
      API_PORT: 8080
    command: ["/usr/local/bin/api"]
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8080/health >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 6
    restart: unless-stopped

  strategies:
    build: .
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://a8garber:${POSTGRES_PASSWORD}@postgres:5432/polymarket_dev?sslmode=disable
      RUN_TYPE: prod
    command: ["/app/orchestrator", "--binary", "--run", "prod"]
    volumes:
      - ./configs:/app/configs:ro
    restart: unless-stopped

  archiver:
    build: .
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://a8garber:${POSTGRES_PASSWORD}@postgres:5432/polymarket_dev?sslmode=disable
      ARCHIVE_S3_BUCKET: ${ARCHIVE_S3_BUCKET}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY both set using IAM role
    entrypoint: ["/bin/sh","-lc"]
    command: |
      while true; do
        /usr/local/bin/archiver -table market_features -prefix market_features || true
        /usr/local/bin/archiver -table market_trades   -prefix market_trades   || true
        /usr/local/bin/archiver -table market_quotes   -prefix market_quotes   || true
        sleep 300
      done
    restart: unless-stopped

  janitor:
    build: .
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://a8garber:${POSTGRES_PASSWORD}@postgres:5432/polymarket_dev?sslmode=disable
    entrypoint: ["/bin/sh","-lc"]
    command: |
      while true; do
        # keep a 6h hot window in Postgres
        psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT delete_exported_hours_features('6 hours');"
        psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT delete_exported_hours_trades('6 hours');"
        psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT delete_exported_hours_quotes('6 hours');"
        sleep 600
      done
    restart: unless-stopped

volumes:
  postgres_data:
